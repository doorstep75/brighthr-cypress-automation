import { dashboardPage } from '../support/dashboardPage';
import {
	buildEmail,
	FIRST_NAMES,
	LAST_NAMES,
	pick,
} from '../support/data/namePool';
import { employeesPage } from '../support/employeesPage';
import {
	loginOnAuthDomain,
	visitLiteAndClickLogin,
} from '../support/loginPage';

describe('BrightHR Lite Employee tests', () => {
  beforeEach(() => {
    cy.log('‚ÑπÔ∏è Starting beforeEach steps with session caching ‚ÑπÔ∏è');

    // Wrap login steps in cy.session ‚Äî this caches cookies/localStorage
    cy.session('brighthr-session', () => {
      visitLiteAndClickLogin();
      loginOnAuthDomain(Cypress.env('BRIGHTHR_EMAIL'), Cypress.env('BRIGHTHR_PW'));
      cy.url().should('include', '/dashboard');
    });

    // After session restore, go straight to dashboard
    cy.visit('/dashboard');
    cy.log('‚úÖ Logged in and ready for test ‚úÖ');
  });

  it('991px mobile layout with kebab menu', () => {
    // set a viewport that triggers mobile display
    cy.log('üîé Setting viewport to 991px so mobile view is displayed üîç');
    cy.viewport(991, 800);
    // quick check to confirm it's on the dashboard before tests
    dashboardPage.verifyOnDashboard();

    // Employees link should NOT appear as sidebar on mobile view
    dashboardPage.assertEmployeesLinkHidden();
    cy.log('‚úÖ Mobile view displayed | Employees link therefore hidden within kebab menu ‚úÖ');
    cy.log('‚úÖ Mobile view check complete, moving onto the next test ‚úÖ');
  });

  it('992px desktop layout: Employees nav visible with side bar', () => {
    // set a viewport that triggers desktop display
    cy.log('üîé Setting viewport to 992px so desktop view is displayed üîç');
    cy.viewport(992, 800);
    dashboardPage.verifyOnDashboard();

    // Employees link should now be visible in desktop layout
    dashboardPage.employeesLink.should('be.visible');
    cy.log(
      '‚úÖ Employees link visible | sidebar is correctly displayed to left side on desktop view ‚úÖ',
    );
    cy.log('‚úÖ Desktop view check complete, moving onto the next test ‚úÖ');
  });

  it('Employees modal check for each field input', () => {
    // Confirm dashboard is in view
    dashboardPage.verifyOnDashboard();

    // Click employees sidebar
    dashboardPage.employeesLink.should('be.visible').click();
    cy.log('‚úÖ Employees link is visible ‚úÖ');

    // confirm employee hub URL is visible
    cy.url().should('include', '/employee-hub');
    cy.log('‚úÖ URL contains "employee-hub" to confirm we are on employee hub page ‚úÖ');

    // Open modal
    cy.log('‚ÑπÔ∏è Opening the Add employee modal ‚ÑπÔ∏è');
    employeesPage.openAddEmployeeModal();

    // Assertion: save is disabled
    employeesPage.assertSaveDisabled();
    cy.log('‚úÖ Save new employee button present but disabled until mandatory fields populated ‚úÖ');
    // all employee input fields show as empty when first opened (bar start date)
    employeesPage.assertFieldsEmptyOrDefault();
    cy.log(
      '‚úÖ All input fields start as empty other than start date containg "Select date" placeholder ‚úÖ',
    );
    // cancel is enabled and can be clicked
    employeesPage.assertCancelEnabled();

    // validation: mandatory fields change to red when empty and clicked away from
    employeesPage.validateFieldBordersRedOnBlur();
    cy.log('‚úÖ Mandatory fields display red box when clicked away from and not populated ‚úÖ');
    cy.log(
      '‚úÖ Add employee modal checks complete; all input fields are present; moving onto the next test ‚úÖ',
    );
  });

  it('Validation tests on mandatory fields | invalid email | >50 characters in first and last name fields | resolve validation errors', () => {
    cy.log('‚ÑπÔ∏è Starting from dashboard and opening the Add Employee modal ‚ÑπÔ∏è');
    dashboardPage.verifyOnDashboard();
    dashboardPage.employeesLink.should('be.visible').click();
    cy.url().should('include', '/employee-hub');
    employeesPage.openAddEmployeeModal();
    cy.log('‚úÖ Opened the Employee Modal | adding invalid data next ‚úÖ');

    // Define invalid data
    const tooLong = 'A'.repeat(51);
    const invalidEmail = 'invalid.email@domain.';

    cy.log('‚ÑπÔ∏è Adding in invalid first name, last name and email | expecting validation flags ‚ÑπÔ∏è');
    employeesPage.typeInvalidNamesAndEmail(tooLong, invalidEmail);
    employeesPage.expectThreeRequiredRed();

    employeesPage.expectSaveDisabled();
    cy.log('‚úÖ All invalid fields red; Save disabled ‚úÖ');

    cy.log('‚ÑπÔ∏è Addressing the error in mandatory email field ‚ÑπÔ∏è');
    employeesPage.makeEmailValidByTyping('o'); // now domain.co
    employeesPage.expectEmailNotRed();
    employeesPage.expectSaveDisabled();
    cy.log('‚úÖ Email fixed; Save still disabled (name fields too long) ‚úÖ');

    cy.log('‚ÑπÔ∏è Addressing the error in last name field ‚ÑπÔ∏è');
    employeesPage.backspaceLastNameOnce();
    employeesPage.expectLastNameNotRed();
    employeesPage.expectSaveDisabled();
    cy.log('‚úÖ Last name fixed; Save still disabled (first name too long) ‚úÖ');

    cy.log('‚ÑπÔ∏è Addressing the error in first name field ‚ÑπÔ∏è');
    employeesPage.backspaceFirstNameOnce();
    employeesPage.expectFirstNameNotRed();
    employeesPage.expectSaveEnabled();
    cy.log('‚úÖ First name fixed; All required fields valid; Save now enabled ‚úÖ');

    cy.log('‚ÑπÔ∏è Confirm the checkbox can be toggled ‚ÑπÔ∏è');
    employeesPage.toggleRegistrationCheckbox();
    cy.log('‚úÖ Checkbox can be toggled on or off (ticked/unticked ‚úÖ');
    cy.log('‚úÖ Validation checks complete, moving onto the next test ‚úÖ');
  });

  it('happy path adds two employees (filling all fields) and verifies both appear in the employees list', () => {
    cy.log('‚ÑπÔ∏è Starting from dashboard and opening the Add Employee modal ‚ÑπÔ∏è');
    dashboardPage.verifyOnDashboard();

    // ---- Test data ----
    const emp1FirstName = pick(FIRST_NAMES);
    const emp1LastName = pick(LAST_NAMES);
    const emp1Email = buildEmail(emp1FirstName, emp1LastName);

    const emp2FirstName = pick(FIRST_NAMES);
    const emp2LastName = pick(LAST_NAMES);
    const emp2Email = buildEmail(emp2FirstName, emp2LastName);

    const phoneNumber = '07123456789';
    const jobTitle = 'Test Analyst';

    cy.log(`‚ÑπÔ∏è Created Emp1: ${emp1FirstName} ${emp1LastName} (${emp1Email}) ‚ÑπÔ∏è`);
    cy.log(`‚ÑπÔ∏è Created Emp2: ${emp2FirstName} ${emp2LastName} (${emp2Email}) ‚ÑπÔ∏è`);

    cy.log(`‚ÑπÔ∏è Ready to open Employees link, then open Add employee modal ‚ÑπÔ∏è`);
    dashboardPage.employeesLink.should('be.visible').click();
    cy.url().should('include', '/employee-hub');
    employeesPage.openAddEmployeeModal();

    cy.log(`‚ÑπÔ∏è Add employee modal opened; creating Employee 1 using all inputs ‚ÑπÔ∏è`);
    employeesPage.fillEmployeeForm({
      firstName: emp1FirstName,
      lastName: emp1LastName,
      email: emp1Email,
      phone: phoneNumber,
      jobTitle,
      startDay: 7, // pick 7th of visible month
    });
    cy.log(
      `‚ÑπÔ∏è Saving Employee 1; check success modal content; click add another for next Employee ‚ÑπÔ∏è`,
    );
    employeesPage.clickSave();
    employeesPage.assertSuccessModalFor(emp1FirstName);
    employeesPage.clickAddAnotherEmployee();

    cy.log(`‚ÑπÔ∏è Creating Employee 2 using all inputs ‚ÑπÔ∏è`);
    employeesPage.modalTitle.should('be.visible'); // fresh modal
    employeesPage.fillEmployeeForm({
      firstName: emp2FirstName,
      lastName: emp2LastName,
      email: emp2Email,
      phone: phoneNumber,
      jobTitle,
      startDay: 26, // pick 26th of visible month
    });
    cy.log(`‚ÑπÔ∏è Saving Employee 2; check success modal content ‚ÑπÔ∏è`);
    employeesPage.clickSave();
    employeesPage.assertSuccessModalFor(emp2FirstName);

    cy.log(`‚ÑπÔ∏è Close success modal and confirm redirected to employee hub page ‚ÑπÔ∏è`);
    employeesPage.closeSuccessModalOnly();
    employeesPage.assertOnEmployeeHubPage();
    cy.log('‚úÖ Closed the modal and back on the Employee hub page ‚úÖ');

    cy.log(`‚ÑπÔ∏è Check that both employees were created and are listed on Employee hub page ‚ÑπÔ∏è`);
    employeesPage.assertEmployeesVisible([
      `${emp1FirstName} ${emp1LastName}`,
      `${emp2FirstName} ${emp2LastName}`,
    ]);

    cy.log('‚úÖ Two employees added and listed successfully');
    cy.log('‚úÖ Happy path of creating two employees is complete ‚úÖ');
    cy.log('üéâ All tests are complete üéâ');
  });
});
